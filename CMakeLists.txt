cmake_minimum_required(VERSION 3.10)
set(CMAKE_CXX_STANDARD 20)

project(minidb)

if(NOT WIN32)
  string(ASCII 27 Esc)
  set(ColourReset "${Esc}[m")
  set(ColourBold  "${Esc}[1m")
  set(Red         "${Esc}[31m")
  set(Green       "${Esc}[32m")
  set(Yellow      "${Esc}[33m")
  set(Blue        "${Esc}[34m")
  set(Magenta     "${Esc}[35m")
  set(Cyan        "${Esc}[36m")
  set(White       "${Esc}[37m")
  set(BoldRed     "${Esc}[1;31m")
  set(BoldGreen   "${Esc}[1;32m")
  set(BoldYellow  "${Esc}[1;33m")
  set(BoldBlue    "${Esc}[1;34m")
  set(BoldMagenta "${Esc}[1;35m")
  set(BoldCyan    "${Esc}[1;36m")
  set(BoldWhite   "${Esc}[1;37m")
endif()


SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)
SET(CMAKE_EXPORT_COMPILE_COMMANDS ON)
SET(DEBUG ON)
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_SOURCE_DIR}/cmake)

find_program(CCACHE_FOUND ccache)
if(CCACHE_FOUND)
  set(CMAKE_CXX_COMPILER_LAUNCHER ccache)
  set(CMAKE_C_COMPILER_LAUNCHER   ccache)
  MESSAGE(STATUS "${Yellow}USE CACHE${ColourReset}")
endif(CCACHE_FOUND)

OPTION(ENABLE_ASAN "Enable build with address sanitizer" OFF)
OPTION(WITH_UNIT_TESTS "Compile miniob with unit tests" OFF)
OPTION(CONCURRENCY "Support concurrency operations" OFF)
OPTION(STATIC_STDLIB "Link std library static or dynamic, such as libgcc, libstdc++, libasan" OFF)
OPTION(DEBUG "Debug mode" OFF)

MESSAGE(STATUS "${Yellow}PROJECT_SOURCE_DIR: ${ColourReset}" ${PROJECT_SOURCE_DIR} )
MESSAGE(STATUS "${Yellow}PROJECT_BINARY_DIR: ${ColourReset}" ${PROJECT_BINARY_DIR} )
MESSAGE(STATUS "${Yellow}ENABLE_ASAN: ${ColourReset}" ${ENABLE_ASAN} )
MESSAGE(STATUS "${Yellow}WITH_UNIT_TESTS: ${ColourReset}" ${WITH_UNIT_TESTS} )
MESSAGE(STATUS "${Yellow}CONCURRENCY: ${ColourReset}" ${CONCURRENCY} )
MESSAGE(STATUS "${Yellow}STATIC_STDLIB: ${ColourReset}" ${STATIC_STDLIB} )
MESSAGE(STATUS "${Yellow}DEBUG: ${ColourReset}" ${DEBUG} )

IF(WIN32)
    ADD_DEFINITIONS(-DWIN32)
ELSEIF(WIN64)
    ADD_DEFINITIONS(-DWIN64)
ELSEIF(APPLE)
    ADD_DEFINITIONS(-D__MACH__ )
ELSEIF(UNIX)
    ADD_DEFINITIONS(-DUNIX -DLINUX)
ELSE()
ENDIF(WIN32)

SET(CMAKE_COMMON_FLAGS "${CMAKE_COMMON_FLAGS} -Wall -Werror")
IF(DEBUG)
    SET(CMAKE_COMMON_FLAGS "${CMAKE_COMMON_FLAGS}  -O0 -g -DDEBUG ")
    ADD_DEFINITIONS(-DENABLE_DEBUG)
ELSE()
    SET(CMAKE_COMMON_FLAGS "${CMAKE_COMMON_FLAGS}  -O2")
ENDIF()

IF (CONCURRENCY)
    SET(CMAKE_COMMON_FLAGS "${CMAKE_COMMON_FLAGS} -DCONCURRENCY")
    ADD_DEFINITIONS(-DCONCURRENCY)
ENDIF (CONCURRENCY)

MESSAGE(STATUS "${Yellow}CMAKE_CXX_COMPILER_ID : ${ColourReset}" ${CMAKE_CXX_COMPILER_ID})
IF ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU" AND ${STATIC_STDLIB})
    ADD_LINK_OPTIONS(-static-libgcc -static-libstdc++)
ENDIF()

IF (ENABLE_ASAN)
    SET(CMAKE_COMMON_FLAGS "${CMAKE_COMMON_FLAGS} -fno-omit-frame-pointer -fsanitize=address")
    IF ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU" AND ${STATIC_STDLIB})
        ADD_LINK_OPTIONS(-static-libasan)
    ENDIF()
ENDIF()

IF (DEFINED ENV{LD_LIBRARY_PATH})
    SET(LD_LIBRARY_PATH_STR $ENV{LD_LIBRARY_PATH})
    string(REPLACE ":" ";" LD_LIBRARY_PATH_LIST ${LD_LIBRARY_PATH_STR})
    MESSAGE(" Add LD_LIBRARY_PATH to -L flags " ${LD_LIBRARY_PATH_LIST})
    LINK_DIRECTORIES(${LD_LIBRARY_PATH_LIST})
ENDIF ()

IF(WITH_UNIT_TESTS)
    SET(CMAKE_COMMON_FLAGS "${CMAKE_COMMON_FLAGS} -fprofile-arcs -ftest-coverage")
    enable_testing()
    ADD_SUBDIRECTORY(unittest)
ENDIF(WITH_UNIT_TESTS)

INCLUDE_DIRECTORIES(. ${PROJECT_SOURCE_DIR}/deps)

SET(CMAKE_CXX_FLAGS ${CMAKE_COMMON_FLAGS})
SET(CMAKE_C_FLAGS ${CMAKE_COMMON_FLAGS})
MESSAGE(STATUS "${Yellow}CMAKE_CXX_FLAGS: ${ColourReset}" ${CMAKE_CXX_FLAGS})

# ADD_SUBDIRECTORY(src bin)  bin 为目标目录， 可以省略
ADD_SUBDIRECTORY(deps)
ADD_SUBDIRECTORY(src/obclient)
ADD_SUBDIRECTORY(src/observer)
ADD_SUBDIRECTORY(test/perf)
ADD_SUBDIRECTORY(benchmark)
ADD_SUBDIRECTORY(tools)

